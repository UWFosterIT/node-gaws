{"version":3,"sources":["../../src/index.js"],"names":["opts","certReader","hasOwnProperty","Object","create","FileCertificate","file","S3Certificate","s3","Error","certs","readCertificate","cert","key","existsSync","readFileSync","S3","getObject","Bucket","certBucket","Key","certKey","promise","catch","err","console","log","keyBucket","keyKey","Body","UWGAWS","initialize","options","config","auth","certInfo","loggers","add","colorize","label","level","process","env","LOG_LEVEL","logLevel","prettyPrint","get","cache","cachePath","cacheExt","programs","applications","applicants","module","exports","on","reason","p","error","inspect","exit"],"mappings":"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","file":"index.js","sourcesContent":["import 'source-map-support/register';\nimport Applicants   from './modules/applicants';\nimport Applications from './modules/applications';\nimport AWS          from 'aws-sdk';\nimport fs           from 'fs';\nimport GradPrograms from './modules/gradprograms';\nimport MicroCache   from 'micro-cache';\nimport util         from 'util';\nimport winston      from 'winston';\n\nlet FileCertificate = {\n  readCertificate: async (opts) => {\n    if (opts.cert === '' || opts.key === '' ||\n      !fs.existsSync(opts.cert) || !fs.existsSync(opts.key)) {\n      throw new Error(`Client cert ${opts.cert} or key ${opts.key} can not be found`);\n    }\n\n    return {\n      cert: fs.readFileSync(opts.cert),\n      key:  fs.readFileSync(opts.key)\n    };\n  }\n};\n\nlet S3Certificate = {\n  readCertificate: async (opts) => {\n    let s3 = new AWS.S3();\n    let cert = await s3.getObject({\n      Bucket: opts.certBucket,\n      Key:    opts.certKey\n    }).promise().catch((err) => {\n      console.log('cert error', err);\n    });\n    let key = await s3.getObject({\n      Bucket: opts.keyBucket,\n      Key:    opts.keyKey\n    }).promise();\n\n    return {\n      cert: cert.Body,\n      key:  key.Body\n    };\n  }\n};\n\nasync function readCertificate(opts) {\n  let certReader;\n\n  switch (true) {\n\n    case opts.hasOwnProperty('file'):\n      certReader = Object.create(FileCertificate);\n      opts = opts.file;\n      break;\n\n    case opts.hasOwnProperty('s3'):\n      certReader = Object.create(S3Certificate);\n      opts = opts.s3;\n      break;\n\n    default:\n      throw Error('Certificate reader not supported');\n  }\n  let certs = await certReader.readCertificate(opts);\n  return certs;\n\n}\n\nlet UWGAWS = {\n  async initialize(options) {\n    let config = options;\n    config.auth = await readCertificate(config.certInfo);\n\n    winston.loggers.add('uwgaws', {\n      console: {\n        colorize:    true,\n        label:       'uwgaws',\n        level:       process.env.LOG_LEVEL || options.logLevel,\n        prettyPrint: true\n      }\n    });\n    this.log = winston.loggers.get('uwgaws');\n    config.log = this.log;\n    config.cache = new MicroCache(\n      options.cachePath,\n      options.logLevel,\n      options.cacheExt\n    );\n\n    this.programs     = new GradPrograms(config);\n    this.applications = new Applications(config);\n    this.applicants   = new Applicants(config);\n\n    return this;\n  }\n};\n\nmodule.exports = UWGAWS;\n\nprocess.on('unhandledRejection', (reason, p) => {\n  console.error(`Promise: ${util.inspect(p)}\\nReason: ${reason}`);\n  process.exit(1);\n});\n"]}