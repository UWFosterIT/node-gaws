{"version":3,"sources":["../../src/index.js"],"names":["readCertificate","cert","key","existsSync","Error","readFileSync","UWGAWS","initialize","options","config","auth","loggers","add","console","colorize","label","level","process","env","LOG_LEVEL","logLevel","prettyPrint","log","get","cache","cachePath","cacheExt","programs","applications","applicants","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,eAAT,GAA8C;AAAA,MAArBC,IAAqB,uEAAd,EAAc;AAAA,MAAVC,GAAU,uEAAJ,EAAI;;AAC5C,MAAID,SAAS,EAAT,IAAeC,QAAQ,EAAvB,IACA,CAAC,aAAGC,UAAH,CAAcF,IAAd,CADD,IACwB,CAAC,aAAGE,UAAH,CAAcD,GAAd,CAD7B,EACiD;AAC/C,UAAM,IAAIE,KAAJ,kBAAyBH,IAAzB,gBAAwCC,GAAxC,uBAAN;AACD;;AAED,SAAO;AACLD,UAAM,aAAGI,YAAH,CAAgBJ,IAAhB,CADD;AAELC,SAAM,aAAGG,YAAH,CAAgBH,GAAhB;AAFD,GAAP;AAID;;AAED,IAAII,SAAS;AACXC,YADW,sBACAC,OADA,EACS;AAClB,QAAIC,SAASD,OAAb;AACAC,WAAOC,IAAP,GAAcV,gBAAgBQ,QAAQP,IAAxB,EAA8BO,QAAQN,GAAtC,CAAd;;AAEA,sBAAQS,OAAR,CAAgBC,GAAhB,CAAoB,QAApB,EAA8B;AAC5BC,eAAS;AACPC,kBAAa,IADN;AAEPC,eAAa,QAFN;AAGPC,eAAaC,QAAQC,GAAR,CAAYC,SAAZ,IAAyBX,QAAQY,QAHvC;AAIPC,qBAAa;AAJN;AADmB,KAA9B;;AASAZ,WAAOa,GAAP,GAAa,kBAAQX,OAAR,CAAgBY,GAAhB,CAAoB,QAApB,CAAb;AACAd,WAAOe,KAAP,GAAe,yBACbhB,QAAQiB,SADK,EAEbjB,QAAQY,QAFK,EAGbZ,QAAQkB,QAHK,CAAf;;AAMA,SAAKC,QAAL,GAAgB,2BAAiBlB,MAAjB,CAAhB;AACA,SAAKmB,YAAL,GAAoB,2BAAiBnB,MAAjB,CAApB;AACA,SAAKoB,UAAL,GAAkB,yBAAepB,MAAf,CAAlB;;AAEA,WAAO,IAAP;AACD;AA1BU,CAAb;;AA6BAqB,OAAOC,OAAP,GAAiBzB,MAAjB","file":"index.js","sourcesContent":["import fs           from 'fs';\nimport winston      from 'winston';\nimport MicroCache   from 'micro-cache';\nimport GradPrograms from './modules/gradprograms';\nimport Applications from './modules/applications';\nimport Applicants from './modules/applicants';\n\nfunction readCertificate(cert = '', key = '') {\n  if (cert === '' || key === '' ||\n      !fs.existsSync(cert) || !fs.existsSync(key)) {\n    throw new Error(`Client cert ${cert} or key ${key} can not be found`);\n  }\n\n  return {\n    cert: fs.readFileSync(cert),\n    key:  fs.readFileSync(key)\n  };\n}\n\nlet UWGAWS = {\n  initialize(options) {\n    let config = options;\n    config.auth = readCertificate(options.cert, options.key);\n\n    winston.loggers.add('uwgaws', {\n      console: {\n        colorize:    true,\n        label:       'uwgaws',\n        level:       process.env.LOG_LEVEL || options.logLevel,\n        prettyPrint: true\n      }\n    });\n\n    config.log = winston.loggers.get('uwgaws');\n    config.cache = new MicroCache(\n      options.cachePath,\n      options.logLevel,\n      options.cacheExt\n    );\n\n    this.programs = new GradPrograms(config);\n    this.applications = new Applications(config);\n    this.applicants = new Applicants(config);\n\n    return this;\n  }\n};\n\nmodule.exports = UWGAWS;\n"]}