{"version":3,"sources":["../../src/index.js"],"names":["opts","certReader","hasOwnProperty","Object","create","FileCertificate","file","S3Certificate","s3","Error","readCertificate","certs","cert","key","existsSync","readFileSync","S3","getObject","Bucket","certBucket","Key","certKey","promise","catch","err","console","log","keyBucket","keyKey","Body","UWGAWS","initialize","options","config","certInfo","auth","loggers","add","colorize","label","level","process","env","LOG_LEVEL","logLevel","prettyPrint","get","cache","cachePath","cacheExt","programs","applications","applicants","module","exports","on","reason","p","error","inspect","exit"],"mappings":"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","file":"index.js","sourcesContent":["import 'source-map-support/register';\nimport Applicants from './modules/applicants';\nimport Applications from './modules/applications';\nimport AWS from 'aws-sdk';\nimport fs from 'fs';\nimport GradPrograms from './modules/gradprograms';\nimport MicroCache from 'micro-cache';\nimport util from 'util';\nimport winston from 'winston';\n\nlet FileCertificate = {\n  readCertificate: async (opts) => {\n    if (opts.cert === '' || opts.key === '' ||\n      !fs.existsSync(opts.cert) || !fs.existsSync(opts.key)) {\n      throw new Error(`Client cert ${opts.cert} or key ${opts.key} can not be found`);\n    }\n\n    return {\n      cert: fs.readFileSync(opts.cert),\n      key:  fs.readFileSync(opts.key)\n    };\n  }\n};\n\nlet S3Certificate = {\n  readCertificate: async (opts) => {\n    let s3 = new AWS.S3();\n    let cert = await s3.getObject({\n      Bucket: opts.certBucket,\n      Key:    opts.certKey\n    }).promise().catch((err) => {\n      console.log('cert error', err);\n    });\n    let key = await s3.getObject({\n      Bucket: opts.keyBucket,\n      Key:    opts.keyKey\n    }).promise();\n    return {\n      cert: cert.Body,\n      key:  key.Body\n    };\n  }\n};\n\nasync function readCertificate(opts) {\n  let certReader;\n\n  switch (true) {\n\n    case opts.hasOwnProperty('file'):\n      certReader = Object.create(FileCertificate);\n      opts = opts.file;\n      break;\n\n    case opts.hasOwnProperty('s3'):\n      certReader = Object.create(S3Certificate);\n      opts = opts.s3;\n      break;\n\n    default:\n      throw Error('Certificate reader not supported');\n  }\n  let certs = await certReader.readCertificate(opts);\n  return certs;\n\n}\n\nlet UWGAWS = {\n  async initialize(options) {\n    let config = options;\n    config.auth = await readCertificate(config.certInfo);\n    console.log(config.auth);\n\n    winston.loggers.add('uwgaws', {\n      console: {\n        colorize:    true,\n        label:       'uwgaws',\n        level:       process.env.LOG_LEVEL || options.logLevel,\n        prettyPrint: true\n      }\n    });\n    this.log = winston.loggers.get('uwgaws');\n    config.log = this.log;\n    config.cache = new MicroCache(\n      options.cachePath,\n      options.logLevel,\n      options.cacheExt\n    );\n\n    this.programs = new GradPrograms(config);\n    this.applications = new Applications(config);\n    this.applicants = new Applicants(config);\n\n    return this;\n  }\n};\n\nmodule.exports = UWGAWS;\n\nprocess.on('unhandledRejection', (reason, p) => {\n  console.error(`Promise: ${util.inspect(p)}\\nReason: ${reason}`);\n  process.exit(1);\n});\n"]}