{"version":3,"sources":["../../../src/modules/service.js"],"names":["Service","constructor","config","log","cache","_options","endpoint","agentOptions","auth","uriCache","replace","uri","baseUrl","_get","Promise","fulfill","reject","options","cacheMode","debug","get","err","response","body","statusCode","_buildResult","read","write","result","_isJson","message","JSON","parse","data","e"],"mappings":"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","file":"service.js","sourcesContent":["import request from 'request';\n\nclass Service {\n  constructor(config) {\n    this.config = config;\n    this.log    = config.log;\n    this.cache  = config.cache;\n  }\n\n  _options(endpoint) {\n    return {\n      agentOptions: this.config.auth,\n      uriCache:     endpoint.replace(/\\//g, ''),\n      uri:          this.config.baseUrl + endpoint\n    };\n  }\n\n  _get(endpoint) {\n    return new Promise((fulfill, reject) => {\n      // wild    no load no save\n      // dryrun  load not save\n      // record  load and save\n      let options = this._options(endpoint);\n\n      if (this.config.cacheMode === 'wild') {\n        this.log.debug(`wild -- ${options.uri}`);\n        request.get(options, (err, response, body) => {\n          if (!err) {\n            if (response.statusCode === 404) {\n              // special case for 404 because the Student Web Service\n              // returns ugly HTML in the response body.\n              body = 'Not found.';\n            }\n            fulfill(this._buildResult(response, body));\n          } else {\n            reject(err);\n          }\n        });\n      } else if (this.config.cacheMode === 'dryrun') {\n        this.log.debug(`dryrun for ${options.uri}`);\n        let body = this.cache.read(options.uriCache);\n        if (body) {\n          let response = {};\n          response.statusCode = 200;\n          fulfill(this._buildResult(response, body));\n        } else {\n          request.get(options, (err, response, body) => {\n            if (!err) {\n              if (response.statusCode === 404) {\n                // special case for 404 because the Student Web Service\n                // returns ugly HTML in the response body.\n                body = 'Not found.';\n              }\n              fulfill(this._buildResult(response, body));\n            } else {\n              reject(err);\n            }\n          });\n        }\n      } else if (this.config.cacheMode === 'record') {\n        this.log.debug(`record -- ${options.uri}`);\n        let body = this.cache.read(options.uriCache);\n        if (body) {\n          let response = {};\n          response.statusCode = 200;\n          fulfill(this._buildResult(response, body));\n        } else {\n          request.get(options, (err, response, body) => {\n            if (!err) {\n              if (response.statusCode === 200) {\n                this.cache.write(options.uriCache, body, true);\n              } else if (response.statusCode === 404) {\n                // special case for 404 because the Student Web Service\n                // returns ugly HTML in the response body.\n                body = 'Not found.';\n              }\n              fulfill(this._buildResult(response, body));\n            } else {\n              reject(err);\n            }\n          });\n        }\n      }\n    });\n  }\n\n  _buildResult(response, body) {\n    let result = {};\n    result.statusCode = response.statusCode;\n    if (response.statusCode != 200) {\n      if (!this._isJson(body)) {\n        result.message = body;\n      } else {\n        result.message = JSON.parse(body);\n      }\n      result.data = {};\n    } else {\n      if (this._isJson(body)) {\n        result.data = JSON.parse(body);\n      } else {\n        result.data = body;\n      }\n    }\n    return result;\n  }\n\n  _isJson(data) {\n    try {\n      JSON.parse(data);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default Service;\n"]}